Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    WS

Grammar

Rule 0     S' -> program
Rule 1     program -> program statement
Rule 2     program -> statement
Rule 3     program -> <empty>
Rule 4     block -> NEWLINE INDENT groupstat DEDENT
Rule 5     groupstat -> groupstat statement
Rule 6     groupstat -> <empty>
Rule 7     statement -> command NEWLINE
Rule 8     statement -> command
Rule 9     command -> IFBLOCK RIGHT block ENDIF
Rule 10    command -> IFBLOCK DOWN block ENDIF
Rule 11    command -> IFBLOCK UP block ENDIF
Rule 12    command -> IFBLOCK LEFT block ENDIF
Rule 13    command -> REPEAT expr block ENDREPEAT
Rule 14    command -> PROCEDURE ID block ENDPROC
Rule 15    command -> CALL ID
Rule 16    command -> RIGHT expr
Rule 17    command -> LEFT expr
Rule 18    command -> UP expr
Rule 19    command -> DOWN expr
Rule 20    command -> SET ID EQUALS expr
Rule 21    expr -> expr PLUS factor
Rule 22    expr -> expr MINUS factor
Rule 23    expr -> factor
Rule 24    factor -> factor TIMES fact
Rule 25    factor -> factor DIVIDE fact
Rule 26    factor -> fact
Rule 27    fact -> NUMBER
Rule 28    fact -> ID
Rule 29    fact -> LPAREN expr RPAREN

Terminals, with rules where they appear

CALL                 : 15
DEDENT               : 4
DIVIDE               : 25
DOWN                 : 10 19
ENDIF                : 9 10 11 12
ENDPROC              : 14
ENDREPEAT            : 13
EQUALS               : 20
ID                   : 14 15 20 28
IFBLOCK              : 9 10 11 12
INDENT               : 4
LEFT                 : 12 17
LPAREN               : 29
MINUS                : 22
NEWLINE              : 4 7
NUMBER               : 27
PLUS                 : 21
PROCEDURE            : 14
REPEAT               : 13
RIGHT                : 9 16
RPAREN               : 29
SET                  : 20
TIMES                : 24
UP                   : 11 18
WS                   : 
error                : 

Nonterminals, with rules where they appear

block                : 9 10 11 12 13 14
command              : 7 8
expr                 : 13 16 17 18 19 20 21 22 29
fact                 : 24 25 26
factor               : 21 22 23 24 25
groupstat            : 4 5
program              : 1 0
statement            : 1 2 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program statement
    (2) program -> . statement
    (3) program -> .
    (7) statement -> . command NEWLINE
    (8) statement -> . command
    (9) command -> . IFBLOCK RIGHT block ENDIF
    (10) command -> . IFBLOCK DOWN block ENDIF
    (11) command -> . IFBLOCK UP block ENDIF
    (12) command -> . IFBLOCK LEFT block ENDIF
    (13) command -> . REPEAT expr block ENDREPEAT
    (14) command -> . PROCEDURE ID block ENDPROC
    (15) command -> . CALL ID
    (16) command -> . RIGHT expr
    (17) command -> . LEFT expr
    (18) command -> . UP expr
    (19) command -> . DOWN expr
    (20) command -> . SET ID EQUALS expr

  ! shift/reduce conflict for IFBLOCK resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for RIGHT resolved as shift
  ! shift/reduce conflict for LEFT resolved as shift
  ! shift/reduce conflict for UP resolved as shift
  ! shift/reduce conflict for DOWN resolved as shift
  ! shift/reduce conflict for SET resolved as shift
    $end            reduce using rule 3 (program -> .)
    IFBLOCK         shift and go to state 4
    REPEAT          shift and go to state 9
    PROCEDURE       shift and go to state 10
    CALL            shift and go to state 11
    RIGHT           shift and go to state 5
    LEFT            shift and go to state 8
    UP              shift and go to state 7
    DOWN            shift and go to state 6
    SET             shift and go to state 12

  ! IFBLOCK         [ reduce using rule 3 (program -> .) ]
  ! REPEAT          [ reduce using rule 3 (program -> .) ]
  ! PROCEDURE       [ reduce using rule 3 (program -> .) ]
  ! CALL            [ reduce using rule 3 (program -> .) ]
  ! RIGHT           [ reduce using rule 3 (program -> .) ]
  ! LEFT            [ reduce using rule 3 (program -> .) ]
  ! UP              [ reduce using rule 3 (program -> .) ]
  ! DOWN            [ reduce using rule 3 (program -> .) ]
  ! SET             [ reduce using rule 3 (program -> .) ]

    program                        shift and go to state 1
    statement                      shift and go to state 2
    command                        shift and go to state 3

state 1

    (0) S' -> program .
    (1) program -> program . statement
    (7) statement -> . command NEWLINE
    (8) statement -> . command
    (9) command -> . IFBLOCK RIGHT block ENDIF
    (10) command -> . IFBLOCK DOWN block ENDIF
    (11) command -> . IFBLOCK UP block ENDIF
    (12) command -> . IFBLOCK LEFT block ENDIF
    (13) command -> . REPEAT expr block ENDREPEAT
    (14) command -> . PROCEDURE ID block ENDPROC
    (15) command -> . CALL ID
    (16) command -> . RIGHT expr
    (17) command -> . LEFT expr
    (18) command -> . UP expr
    (19) command -> . DOWN expr
    (20) command -> . SET ID EQUALS expr

    IFBLOCK         shift and go to state 4
    REPEAT          shift and go to state 9
    PROCEDURE       shift and go to state 10
    CALL            shift and go to state 11
    RIGHT           shift and go to state 5
    LEFT            shift and go to state 8
    UP              shift and go to state 7
    DOWN            shift and go to state 6
    SET             shift and go to state 12

    statement                      shift and go to state 13
    command                        shift and go to state 3

state 2

    (2) program -> statement .

    IFBLOCK         reduce using rule 2 (program -> statement .)
    REPEAT          reduce using rule 2 (program -> statement .)
    PROCEDURE       reduce using rule 2 (program -> statement .)
    CALL            reduce using rule 2 (program -> statement .)
    RIGHT           reduce using rule 2 (program -> statement .)
    LEFT            reduce using rule 2 (program -> statement .)
    UP              reduce using rule 2 (program -> statement .)
    DOWN            reduce using rule 2 (program -> statement .)
    SET             reduce using rule 2 (program -> statement .)
    $end            reduce using rule 2 (program -> statement .)


state 3

    (7) statement -> command . NEWLINE
    (8) statement -> command .

    NEWLINE         shift and go to state 14
    IFBLOCK         reduce using rule 8 (statement -> command .)
    REPEAT          reduce using rule 8 (statement -> command .)
    PROCEDURE       reduce using rule 8 (statement -> command .)
    CALL            reduce using rule 8 (statement -> command .)
    RIGHT           reduce using rule 8 (statement -> command .)
    LEFT            reduce using rule 8 (statement -> command .)
    UP              reduce using rule 8 (statement -> command .)
    DOWN            reduce using rule 8 (statement -> command .)
    SET             reduce using rule 8 (statement -> command .)
    $end            reduce using rule 8 (statement -> command .)
    DEDENT          reduce using rule 8 (statement -> command .)


state 4

    (9) command -> IFBLOCK . RIGHT block ENDIF
    (10) command -> IFBLOCK . DOWN block ENDIF
    (11) command -> IFBLOCK . UP block ENDIF
    (12) command -> IFBLOCK . LEFT block ENDIF

    RIGHT           shift and go to state 15
    DOWN            shift and go to state 16
    UP              shift and go to state 17
    LEFT            shift and go to state 18


state 5

    (16) command -> RIGHT . expr
    (21) expr -> . expr PLUS factor
    (22) expr -> . expr MINUS factor
    (23) expr -> . factor
    (24) factor -> . factor TIMES fact
    (25) factor -> . factor DIVIDE fact
    (26) factor -> . fact
    (27) fact -> . NUMBER
    (28) fact -> . ID
    (29) fact -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 22
    ID              shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 19
    factor                         shift and go to state 20
    fact                           shift and go to state 21

state 6

    (19) command -> DOWN . expr
    (21) expr -> . expr PLUS factor
    (22) expr -> . expr MINUS factor
    (23) expr -> . factor
    (24) factor -> . factor TIMES fact
    (25) factor -> . factor DIVIDE fact
    (26) factor -> . fact
    (27) fact -> . NUMBER
    (28) fact -> . ID
    (29) fact -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 22
    ID              shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 25
    factor                         shift and go to state 20
    fact                           shift and go to state 21

state 7

    (18) command -> UP . expr
    (21) expr -> . expr PLUS factor
    (22) expr -> . expr MINUS factor
    (23) expr -> . factor
    (24) factor -> . factor TIMES fact
    (25) factor -> . factor DIVIDE fact
    (26) factor -> . fact
    (27) fact -> . NUMBER
    (28) fact -> . ID
    (29) fact -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 22
    ID              shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 26
    factor                         shift and go to state 20
    fact                           shift and go to state 21

state 8

    (17) command -> LEFT . expr
    (21) expr -> . expr PLUS factor
    (22) expr -> . expr MINUS factor
    (23) expr -> . factor
    (24) factor -> . factor TIMES fact
    (25) factor -> . factor DIVIDE fact
    (26) factor -> . fact
    (27) fact -> . NUMBER
    (28) fact -> . ID
    (29) fact -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 22
    ID              shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 27
    factor                         shift and go to state 20
    fact                           shift and go to state 21

state 9

    (13) command -> REPEAT . expr block ENDREPEAT
    (21) expr -> . expr PLUS factor
    (22) expr -> . expr MINUS factor
    (23) expr -> . factor
    (24) factor -> . factor TIMES fact
    (25) factor -> . factor DIVIDE fact
    (26) factor -> . fact
    (27) fact -> . NUMBER
    (28) fact -> . ID
    (29) fact -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 22
    ID              shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 28
    factor                         shift and go to state 20
    fact                           shift and go to state 21

state 10

    (14) command -> PROCEDURE . ID block ENDPROC

    ID              shift and go to state 29


state 11

    (15) command -> CALL . ID

    ID              shift and go to state 30


state 12

    (20) command -> SET . ID EQUALS expr

    ID              shift and go to state 31


state 13

    (1) program -> program statement .

    IFBLOCK         reduce using rule 1 (program -> program statement .)
    REPEAT          reduce using rule 1 (program -> program statement .)
    PROCEDURE       reduce using rule 1 (program -> program statement .)
    CALL            reduce using rule 1 (program -> program statement .)
    RIGHT           reduce using rule 1 (program -> program statement .)
    LEFT            reduce using rule 1 (program -> program statement .)
    UP              reduce using rule 1 (program -> program statement .)
    DOWN            reduce using rule 1 (program -> program statement .)
    SET             reduce using rule 1 (program -> program statement .)
    $end            reduce using rule 1 (program -> program statement .)


state 14

    (7) statement -> command NEWLINE .

    IFBLOCK         reduce using rule 7 (statement -> command NEWLINE .)
    REPEAT          reduce using rule 7 (statement -> command NEWLINE .)
    PROCEDURE       reduce using rule 7 (statement -> command NEWLINE .)
    CALL            reduce using rule 7 (statement -> command NEWLINE .)
    RIGHT           reduce using rule 7 (statement -> command NEWLINE .)
    LEFT            reduce using rule 7 (statement -> command NEWLINE .)
    UP              reduce using rule 7 (statement -> command NEWLINE .)
    DOWN            reduce using rule 7 (statement -> command NEWLINE .)
    SET             reduce using rule 7 (statement -> command NEWLINE .)
    $end            reduce using rule 7 (statement -> command NEWLINE .)
    DEDENT          reduce using rule 7 (statement -> command NEWLINE .)


state 15

    (9) command -> IFBLOCK RIGHT . block ENDIF
    (4) block -> . NEWLINE INDENT groupstat DEDENT

    NEWLINE         shift and go to state 33

    block                          shift and go to state 32

state 16

    (10) command -> IFBLOCK DOWN . block ENDIF
    (4) block -> . NEWLINE INDENT groupstat DEDENT

    NEWLINE         shift and go to state 33

    block                          shift and go to state 34

state 17

    (11) command -> IFBLOCK UP . block ENDIF
    (4) block -> . NEWLINE INDENT groupstat DEDENT

    NEWLINE         shift and go to state 33

    block                          shift and go to state 35

state 18

    (12) command -> IFBLOCK LEFT . block ENDIF
    (4) block -> . NEWLINE INDENT groupstat DEDENT

    NEWLINE         shift and go to state 33

    block                          shift and go to state 36

state 19

    (16) command -> RIGHT expr .
    (21) expr -> expr . PLUS factor
    (22) expr -> expr . MINUS factor

    NEWLINE         reduce using rule 16 (command -> RIGHT expr .)
    IFBLOCK         reduce using rule 16 (command -> RIGHT expr .)
    REPEAT          reduce using rule 16 (command -> RIGHT expr .)
    PROCEDURE       reduce using rule 16 (command -> RIGHT expr .)
    CALL            reduce using rule 16 (command -> RIGHT expr .)
    RIGHT           reduce using rule 16 (command -> RIGHT expr .)
    LEFT            reduce using rule 16 (command -> RIGHT expr .)
    UP              reduce using rule 16 (command -> RIGHT expr .)
    DOWN            reduce using rule 16 (command -> RIGHT expr .)
    SET             reduce using rule 16 (command -> RIGHT expr .)
    $end            reduce using rule 16 (command -> RIGHT expr .)
    DEDENT          reduce using rule 16 (command -> RIGHT expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38


state 20

    (23) expr -> factor .
    (24) factor -> factor . TIMES fact
    (25) factor -> factor . DIVIDE fact

    PLUS            reduce using rule 23 (expr -> factor .)
    MINUS           reduce using rule 23 (expr -> factor .)
    NEWLINE         reduce using rule 23 (expr -> factor .)
    IFBLOCK         reduce using rule 23 (expr -> factor .)
    REPEAT          reduce using rule 23 (expr -> factor .)
    PROCEDURE       reduce using rule 23 (expr -> factor .)
    CALL            reduce using rule 23 (expr -> factor .)
    RIGHT           reduce using rule 23 (expr -> factor .)
    LEFT            reduce using rule 23 (expr -> factor .)
    UP              reduce using rule 23 (expr -> factor .)
    DOWN            reduce using rule 23 (expr -> factor .)
    SET             reduce using rule 23 (expr -> factor .)
    $end            reduce using rule 23 (expr -> factor .)
    DEDENT          reduce using rule 23 (expr -> factor .)
    RPAREN          reduce using rule 23 (expr -> factor .)
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40


state 21

    (26) factor -> fact .

    TIMES           reduce using rule 26 (factor -> fact .)
    DIVIDE          reduce using rule 26 (factor -> fact .)
    PLUS            reduce using rule 26 (factor -> fact .)
    MINUS           reduce using rule 26 (factor -> fact .)
    NEWLINE         reduce using rule 26 (factor -> fact .)
    IFBLOCK         reduce using rule 26 (factor -> fact .)
    REPEAT          reduce using rule 26 (factor -> fact .)
    PROCEDURE       reduce using rule 26 (factor -> fact .)
    CALL            reduce using rule 26 (factor -> fact .)
    RIGHT           reduce using rule 26 (factor -> fact .)
    LEFT            reduce using rule 26 (factor -> fact .)
    UP              reduce using rule 26 (factor -> fact .)
    DOWN            reduce using rule 26 (factor -> fact .)
    SET             reduce using rule 26 (factor -> fact .)
    $end            reduce using rule 26 (factor -> fact .)
    DEDENT          reduce using rule 26 (factor -> fact .)
    RPAREN          reduce using rule 26 (factor -> fact .)


state 22

    (27) fact -> NUMBER .

    TIMES           reduce using rule 27 (fact -> NUMBER .)
    DIVIDE          reduce using rule 27 (fact -> NUMBER .)
    PLUS            reduce using rule 27 (fact -> NUMBER .)
    MINUS           reduce using rule 27 (fact -> NUMBER .)
    NEWLINE         reduce using rule 27 (fact -> NUMBER .)
    IFBLOCK         reduce using rule 27 (fact -> NUMBER .)
    REPEAT          reduce using rule 27 (fact -> NUMBER .)
    PROCEDURE       reduce using rule 27 (fact -> NUMBER .)
    CALL            reduce using rule 27 (fact -> NUMBER .)
    RIGHT           reduce using rule 27 (fact -> NUMBER .)
    LEFT            reduce using rule 27 (fact -> NUMBER .)
    UP              reduce using rule 27 (fact -> NUMBER .)
    DOWN            reduce using rule 27 (fact -> NUMBER .)
    SET             reduce using rule 27 (fact -> NUMBER .)
    $end            reduce using rule 27 (fact -> NUMBER .)
    DEDENT          reduce using rule 27 (fact -> NUMBER .)
    RPAREN          reduce using rule 27 (fact -> NUMBER .)


state 23

    (28) fact -> ID .

    TIMES           reduce using rule 28 (fact -> ID .)
    DIVIDE          reduce using rule 28 (fact -> ID .)
    PLUS            reduce using rule 28 (fact -> ID .)
    MINUS           reduce using rule 28 (fact -> ID .)
    NEWLINE         reduce using rule 28 (fact -> ID .)
    IFBLOCK         reduce using rule 28 (fact -> ID .)
    REPEAT          reduce using rule 28 (fact -> ID .)
    PROCEDURE       reduce using rule 28 (fact -> ID .)
    CALL            reduce using rule 28 (fact -> ID .)
    RIGHT           reduce using rule 28 (fact -> ID .)
    LEFT            reduce using rule 28 (fact -> ID .)
    UP              reduce using rule 28 (fact -> ID .)
    DOWN            reduce using rule 28 (fact -> ID .)
    SET             reduce using rule 28 (fact -> ID .)
    $end            reduce using rule 28 (fact -> ID .)
    DEDENT          reduce using rule 28 (fact -> ID .)
    RPAREN          reduce using rule 28 (fact -> ID .)


state 24

    (29) fact -> LPAREN . expr RPAREN
    (21) expr -> . expr PLUS factor
    (22) expr -> . expr MINUS factor
    (23) expr -> . factor
    (24) factor -> . factor TIMES fact
    (25) factor -> . factor DIVIDE fact
    (26) factor -> . fact
    (27) fact -> . NUMBER
    (28) fact -> . ID
    (29) fact -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 22
    ID              shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 41
    factor                         shift and go to state 20
    fact                           shift and go to state 21

state 25

    (19) command -> DOWN expr .
    (21) expr -> expr . PLUS factor
    (22) expr -> expr . MINUS factor

    NEWLINE         reduce using rule 19 (command -> DOWN expr .)
    IFBLOCK         reduce using rule 19 (command -> DOWN expr .)
    REPEAT          reduce using rule 19 (command -> DOWN expr .)
    PROCEDURE       reduce using rule 19 (command -> DOWN expr .)
    CALL            reduce using rule 19 (command -> DOWN expr .)
    RIGHT           reduce using rule 19 (command -> DOWN expr .)
    LEFT            reduce using rule 19 (command -> DOWN expr .)
    UP              reduce using rule 19 (command -> DOWN expr .)
    DOWN            reduce using rule 19 (command -> DOWN expr .)
    SET             reduce using rule 19 (command -> DOWN expr .)
    $end            reduce using rule 19 (command -> DOWN expr .)
    DEDENT          reduce using rule 19 (command -> DOWN expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38


state 26

    (18) command -> UP expr .
    (21) expr -> expr . PLUS factor
    (22) expr -> expr . MINUS factor

    NEWLINE         reduce using rule 18 (command -> UP expr .)
    IFBLOCK         reduce using rule 18 (command -> UP expr .)
    REPEAT          reduce using rule 18 (command -> UP expr .)
    PROCEDURE       reduce using rule 18 (command -> UP expr .)
    CALL            reduce using rule 18 (command -> UP expr .)
    RIGHT           reduce using rule 18 (command -> UP expr .)
    LEFT            reduce using rule 18 (command -> UP expr .)
    UP              reduce using rule 18 (command -> UP expr .)
    DOWN            reduce using rule 18 (command -> UP expr .)
    SET             reduce using rule 18 (command -> UP expr .)
    $end            reduce using rule 18 (command -> UP expr .)
    DEDENT          reduce using rule 18 (command -> UP expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38


state 27

    (17) command -> LEFT expr .
    (21) expr -> expr . PLUS factor
    (22) expr -> expr . MINUS factor

    NEWLINE         reduce using rule 17 (command -> LEFT expr .)
    IFBLOCK         reduce using rule 17 (command -> LEFT expr .)
    REPEAT          reduce using rule 17 (command -> LEFT expr .)
    PROCEDURE       reduce using rule 17 (command -> LEFT expr .)
    CALL            reduce using rule 17 (command -> LEFT expr .)
    RIGHT           reduce using rule 17 (command -> LEFT expr .)
    LEFT            reduce using rule 17 (command -> LEFT expr .)
    UP              reduce using rule 17 (command -> LEFT expr .)
    DOWN            reduce using rule 17 (command -> LEFT expr .)
    SET             reduce using rule 17 (command -> LEFT expr .)
    $end            reduce using rule 17 (command -> LEFT expr .)
    DEDENT          reduce using rule 17 (command -> LEFT expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38


state 28

    (13) command -> REPEAT expr . block ENDREPEAT
    (21) expr -> expr . PLUS factor
    (22) expr -> expr . MINUS factor
    (4) block -> . NEWLINE INDENT groupstat DEDENT

    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    NEWLINE         shift and go to state 33

    block                          shift and go to state 42

state 29

    (14) command -> PROCEDURE ID . block ENDPROC
    (4) block -> . NEWLINE INDENT groupstat DEDENT

    NEWLINE         shift and go to state 33

    block                          shift and go to state 43

state 30

    (15) command -> CALL ID .

    NEWLINE         reduce using rule 15 (command -> CALL ID .)
    IFBLOCK         reduce using rule 15 (command -> CALL ID .)
    REPEAT          reduce using rule 15 (command -> CALL ID .)
    PROCEDURE       reduce using rule 15 (command -> CALL ID .)
    CALL            reduce using rule 15 (command -> CALL ID .)
    RIGHT           reduce using rule 15 (command -> CALL ID .)
    LEFT            reduce using rule 15 (command -> CALL ID .)
    UP              reduce using rule 15 (command -> CALL ID .)
    DOWN            reduce using rule 15 (command -> CALL ID .)
    SET             reduce using rule 15 (command -> CALL ID .)
    $end            reduce using rule 15 (command -> CALL ID .)
    DEDENT          reduce using rule 15 (command -> CALL ID .)


state 31

    (20) command -> SET ID . EQUALS expr

    EQUALS          shift and go to state 44


state 32

    (9) command -> IFBLOCK RIGHT block . ENDIF

    ENDIF           shift and go to state 45


state 33

    (4) block -> NEWLINE . INDENT groupstat DEDENT

    INDENT          shift and go to state 46


state 34

    (10) command -> IFBLOCK DOWN block . ENDIF

    ENDIF           shift and go to state 47


state 35

    (11) command -> IFBLOCK UP block . ENDIF

    ENDIF           shift and go to state 48


state 36

    (12) command -> IFBLOCK LEFT block . ENDIF

    ENDIF           shift and go to state 49


state 37

    (21) expr -> expr PLUS . factor
    (24) factor -> . factor TIMES fact
    (25) factor -> . factor DIVIDE fact
    (26) factor -> . fact
    (27) fact -> . NUMBER
    (28) fact -> . ID
    (29) fact -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 22
    ID              shift and go to state 23
    LPAREN          shift and go to state 24

    factor                         shift and go to state 50
    fact                           shift and go to state 21

state 38

    (22) expr -> expr MINUS . factor
    (24) factor -> . factor TIMES fact
    (25) factor -> . factor DIVIDE fact
    (26) factor -> . fact
    (27) fact -> . NUMBER
    (28) fact -> . ID
    (29) fact -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 22
    ID              shift and go to state 23
    LPAREN          shift and go to state 24

    factor                         shift and go to state 51
    fact                           shift and go to state 21

state 39

    (24) factor -> factor TIMES . fact
    (27) fact -> . NUMBER
    (28) fact -> . ID
    (29) fact -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 22
    ID              shift and go to state 23
    LPAREN          shift and go to state 24

    fact                           shift and go to state 52

state 40

    (25) factor -> factor DIVIDE . fact
    (27) fact -> . NUMBER
    (28) fact -> . ID
    (29) fact -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 22
    ID              shift and go to state 23
    LPAREN          shift and go to state 24

    fact                           shift and go to state 53

state 41

    (29) fact -> LPAREN expr . RPAREN
    (21) expr -> expr . PLUS factor
    (22) expr -> expr . MINUS factor

    RPAREN          shift and go to state 54
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38


state 42

    (13) command -> REPEAT expr block . ENDREPEAT

    ENDREPEAT       shift and go to state 55


state 43

    (14) command -> PROCEDURE ID block . ENDPROC

    ENDPROC         shift and go to state 56


state 44

    (20) command -> SET ID EQUALS . expr
    (21) expr -> . expr PLUS factor
    (22) expr -> . expr MINUS factor
    (23) expr -> . factor
    (24) factor -> . factor TIMES fact
    (25) factor -> . factor DIVIDE fact
    (26) factor -> . fact
    (27) fact -> . NUMBER
    (28) fact -> . ID
    (29) fact -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 22
    ID              shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 57
    factor                         shift and go to state 20
    fact                           shift and go to state 21

state 45

    (9) command -> IFBLOCK RIGHT block ENDIF .

    NEWLINE         reduce using rule 9 (command -> IFBLOCK RIGHT block ENDIF .)
    IFBLOCK         reduce using rule 9 (command -> IFBLOCK RIGHT block ENDIF .)
    REPEAT          reduce using rule 9 (command -> IFBLOCK RIGHT block ENDIF .)
    PROCEDURE       reduce using rule 9 (command -> IFBLOCK RIGHT block ENDIF .)
    CALL            reduce using rule 9 (command -> IFBLOCK RIGHT block ENDIF .)
    RIGHT           reduce using rule 9 (command -> IFBLOCK RIGHT block ENDIF .)
    LEFT            reduce using rule 9 (command -> IFBLOCK RIGHT block ENDIF .)
    UP              reduce using rule 9 (command -> IFBLOCK RIGHT block ENDIF .)
    DOWN            reduce using rule 9 (command -> IFBLOCK RIGHT block ENDIF .)
    SET             reduce using rule 9 (command -> IFBLOCK RIGHT block ENDIF .)
    $end            reduce using rule 9 (command -> IFBLOCK RIGHT block ENDIF .)
    DEDENT          reduce using rule 9 (command -> IFBLOCK RIGHT block ENDIF .)


state 46

    (4) block -> NEWLINE INDENT . groupstat DEDENT
    (5) groupstat -> . groupstat statement
    (6) groupstat -> .

    DEDENT          reduce using rule 6 (groupstat -> .)
    IFBLOCK         reduce using rule 6 (groupstat -> .)
    REPEAT          reduce using rule 6 (groupstat -> .)
    PROCEDURE       reduce using rule 6 (groupstat -> .)
    CALL            reduce using rule 6 (groupstat -> .)
    RIGHT           reduce using rule 6 (groupstat -> .)
    LEFT            reduce using rule 6 (groupstat -> .)
    UP              reduce using rule 6 (groupstat -> .)
    DOWN            reduce using rule 6 (groupstat -> .)
    SET             reduce using rule 6 (groupstat -> .)

    groupstat                      shift and go to state 58

state 47

    (10) command -> IFBLOCK DOWN block ENDIF .

    NEWLINE         reduce using rule 10 (command -> IFBLOCK DOWN block ENDIF .)
    IFBLOCK         reduce using rule 10 (command -> IFBLOCK DOWN block ENDIF .)
    REPEAT          reduce using rule 10 (command -> IFBLOCK DOWN block ENDIF .)
    PROCEDURE       reduce using rule 10 (command -> IFBLOCK DOWN block ENDIF .)
    CALL            reduce using rule 10 (command -> IFBLOCK DOWN block ENDIF .)
    RIGHT           reduce using rule 10 (command -> IFBLOCK DOWN block ENDIF .)
    LEFT            reduce using rule 10 (command -> IFBLOCK DOWN block ENDIF .)
    UP              reduce using rule 10 (command -> IFBLOCK DOWN block ENDIF .)
    DOWN            reduce using rule 10 (command -> IFBLOCK DOWN block ENDIF .)
    SET             reduce using rule 10 (command -> IFBLOCK DOWN block ENDIF .)
    $end            reduce using rule 10 (command -> IFBLOCK DOWN block ENDIF .)
    DEDENT          reduce using rule 10 (command -> IFBLOCK DOWN block ENDIF .)


state 48

    (11) command -> IFBLOCK UP block ENDIF .

    NEWLINE         reduce using rule 11 (command -> IFBLOCK UP block ENDIF .)
    IFBLOCK         reduce using rule 11 (command -> IFBLOCK UP block ENDIF .)
    REPEAT          reduce using rule 11 (command -> IFBLOCK UP block ENDIF .)
    PROCEDURE       reduce using rule 11 (command -> IFBLOCK UP block ENDIF .)
    CALL            reduce using rule 11 (command -> IFBLOCK UP block ENDIF .)
    RIGHT           reduce using rule 11 (command -> IFBLOCK UP block ENDIF .)
    LEFT            reduce using rule 11 (command -> IFBLOCK UP block ENDIF .)
    UP              reduce using rule 11 (command -> IFBLOCK UP block ENDIF .)
    DOWN            reduce using rule 11 (command -> IFBLOCK UP block ENDIF .)
    SET             reduce using rule 11 (command -> IFBLOCK UP block ENDIF .)
    $end            reduce using rule 11 (command -> IFBLOCK UP block ENDIF .)
    DEDENT          reduce using rule 11 (command -> IFBLOCK UP block ENDIF .)


state 49

    (12) command -> IFBLOCK LEFT block ENDIF .

    NEWLINE         reduce using rule 12 (command -> IFBLOCK LEFT block ENDIF .)
    IFBLOCK         reduce using rule 12 (command -> IFBLOCK LEFT block ENDIF .)
    REPEAT          reduce using rule 12 (command -> IFBLOCK LEFT block ENDIF .)
    PROCEDURE       reduce using rule 12 (command -> IFBLOCK LEFT block ENDIF .)
    CALL            reduce using rule 12 (command -> IFBLOCK LEFT block ENDIF .)
    RIGHT           reduce using rule 12 (command -> IFBLOCK LEFT block ENDIF .)
    LEFT            reduce using rule 12 (command -> IFBLOCK LEFT block ENDIF .)
    UP              reduce using rule 12 (command -> IFBLOCK LEFT block ENDIF .)
    DOWN            reduce using rule 12 (command -> IFBLOCK LEFT block ENDIF .)
    SET             reduce using rule 12 (command -> IFBLOCK LEFT block ENDIF .)
    $end            reduce using rule 12 (command -> IFBLOCK LEFT block ENDIF .)
    DEDENT          reduce using rule 12 (command -> IFBLOCK LEFT block ENDIF .)


state 50

    (21) expr -> expr PLUS factor .
    (24) factor -> factor . TIMES fact
    (25) factor -> factor . DIVIDE fact

    PLUS            reduce using rule 21 (expr -> expr PLUS factor .)
    MINUS           reduce using rule 21 (expr -> expr PLUS factor .)
    NEWLINE         reduce using rule 21 (expr -> expr PLUS factor .)
    IFBLOCK         reduce using rule 21 (expr -> expr PLUS factor .)
    REPEAT          reduce using rule 21 (expr -> expr PLUS factor .)
    PROCEDURE       reduce using rule 21 (expr -> expr PLUS factor .)
    CALL            reduce using rule 21 (expr -> expr PLUS factor .)
    RIGHT           reduce using rule 21 (expr -> expr PLUS factor .)
    LEFT            reduce using rule 21 (expr -> expr PLUS factor .)
    UP              reduce using rule 21 (expr -> expr PLUS factor .)
    DOWN            reduce using rule 21 (expr -> expr PLUS factor .)
    SET             reduce using rule 21 (expr -> expr PLUS factor .)
    $end            reduce using rule 21 (expr -> expr PLUS factor .)
    DEDENT          reduce using rule 21 (expr -> expr PLUS factor .)
    RPAREN          reduce using rule 21 (expr -> expr PLUS factor .)
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40


state 51

    (22) expr -> expr MINUS factor .
    (24) factor -> factor . TIMES fact
    (25) factor -> factor . DIVIDE fact

    PLUS            reduce using rule 22 (expr -> expr MINUS factor .)
    MINUS           reduce using rule 22 (expr -> expr MINUS factor .)
    NEWLINE         reduce using rule 22 (expr -> expr MINUS factor .)
    IFBLOCK         reduce using rule 22 (expr -> expr MINUS factor .)
    REPEAT          reduce using rule 22 (expr -> expr MINUS factor .)
    PROCEDURE       reduce using rule 22 (expr -> expr MINUS factor .)
    CALL            reduce using rule 22 (expr -> expr MINUS factor .)
    RIGHT           reduce using rule 22 (expr -> expr MINUS factor .)
    LEFT            reduce using rule 22 (expr -> expr MINUS factor .)
    UP              reduce using rule 22 (expr -> expr MINUS factor .)
    DOWN            reduce using rule 22 (expr -> expr MINUS factor .)
    SET             reduce using rule 22 (expr -> expr MINUS factor .)
    $end            reduce using rule 22 (expr -> expr MINUS factor .)
    DEDENT          reduce using rule 22 (expr -> expr MINUS factor .)
    RPAREN          reduce using rule 22 (expr -> expr MINUS factor .)
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40


state 52

    (24) factor -> factor TIMES fact .

    TIMES           reduce using rule 24 (factor -> factor TIMES fact .)
    DIVIDE          reduce using rule 24 (factor -> factor TIMES fact .)
    PLUS            reduce using rule 24 (factor -> factor TIMES fact .)
    MINUS           reduce using rule 24 (factor -> factor TIMES fact .)
    NEWLINE         reduce using rule 24 (factor -> factor TIMES fact .)
    IFBLOCK         reduce using rule 24 (factor -> factor TIMES fact .)
    REPEAT          reduce using rule 24 (factor -> factor TIMES fact .)
    PROCEDURE       reduce using rule 24 (factor -> factor TIMES fact .)
    CALL            reduce using rule 24 (factor -> factor TIMES fact .)
    RIGHT           reduce using rule 24 (factor -> factor TIMES fact .)
    LEFT            reduce using rule 24 (factor -> factor TIMES fact .)
    UP              reduce using rule 24 (factor -> factor TIMES fact .)
    DOWN            reduce using rule 24 (factor -> factor TIMES fact .)
    SET             reduce using rule 24 (factor -> factor TIMES fact .)
    $end            reduce using rule 24 (factor -> factor TIMES fact .)
    DEDENT          reduce using rule 24 (factor -> factor TIMES fact .)
    RPAREN          reduce using rule 24 (factor -> factor TIMES fact .)


state 53

    (25) factor -> factor DIVIDE fact .

    TIMES           reduce using rule 25 (factor -> factor DIVIDE fact .)
    DIVIDE          reduce using rule 25 (factor -> factor DIVIDE fact .)
    PLUS            reduce using rule 25 (factor -> factor DIVIDE fact .)
    MINUS           reduce using rule 25 (factor -> factor DIVIDE fact .)
    NEWLINE         reduce using rule 25 (factor -> factor DIVIDE fact .)
    IFBLOCK         reduce using rule 25 (factor -> factor DIVIDE fact .)
    REPEAT          reduce using rule 25 (factor -> factor DIVIDE fact .)
    PROCEDURE       reduce using rule 25 (factor -> factor DIVIDE fact .)
    CALL            reduce using rule 25 (factor -> factor DIVIDE fact .)
    RIGHT           reduce using rule 25 (factor -> factor DIVIDE fact .)
    LEFT            reduce using rule 25 (factor -> factor DIVIDE fact .)
    UP              reduce using rule 25 (factor -> factor DIVIDE fact .)
    DOWN            reduce using rule 25 (factor -> factor DIVIDE fact .)
    SET             reduce using rule 25 (factor -> factor DIVIDE fact .)
    $end            reduce using rule 25 (factor -> factor DIVIDE fact .)
    DEDENT          reduce using rule 25 (factor -> factor DIVIDE fact .)
    RPAREN          reduce using rule 25 (factor -> factor DIVIDE fact .)


state 54

    (29) fact -> LPAREN expr RPAREN .

    TIMES           reduce using rule 29 (fact -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 29 (fact -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 29 (fact -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 29 (fact -> LPAREN expr RPAREN .)
    NEWLINE         reduce using rule 29 (fact -> LPAREN expr RPAREN .)
    IFBLOCK         reduce using rule 29 (fact -> LPAREN expr RPAREN .)
    REPEAT          reduce using rule 29 (fact -> LPAREN expr RPAREN .)
    PROCEDURE       reduce using rule 29 (fact -> LPAREN expr RPAREN .)
    CALL            reduce using rule 29 (fact -> LPAREN expr RPAREN .)
    RIGHT           reduce using rule 29 (fact -> LPAREN expr RPAREN .)
    LEFT            reduce using rule 29 (fact -> LPAREN expr RPAREN .)
    UP              reduce using rule 29 (fact -> LPAREN expr RPAREN .)
    DOWN            reduce using rule 29 (fact -> LPAREN expr RPAREN .)
    SET             reduce using rule 29 (fact -> LPAREN expr RPAREN .)
    $end            reduce using rule 29 (fact -> LPAREN expr RPAREN .)
    DEDENT          reduce using rule 29 (fact -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 29 (fact -> LPAREN expr RPAREN .)


state 55

    (13) command -> REPEAT expr block ENDREPEAT .

    NEWLINE         reduce using rule 13 (command -> REPEAT expr block ENDREPEAT .)
    IFBLOCK         reduce using rule 13 (command -> REPEAT expr block ENDREPEAT .)
    REPEAT          reduce using rule 13 (command -> REPEAT expr block ENDREPEAT .)
    PROCEDURE       reduce using rule 13 (command -> REPEAT expr block ENDREPEAT .)
    CALL            reduce using rule 13 (command -> REPEAT expr block ENDREPEAT .)
    RIGHT           reduce using rule 13 (command -> REPEAT expr block ENDREPEAT .)
    LEFT            reduce using rule 13 (command -> REPEAT expr block ENDREPEAT .)
    UP              reduce using rule 13 (command -> REPEAT expr block ENDREPEAT .)
    DOWN            reduce using rule 13 (command -> REPEAT expr block ENDREPEAT .)
    SET             reduce using rule 13 (command -> REPEAT expr block ENDREPEAT .)
    $end            reduce using rule 13 (command -> REPEAT expr block ENDREPEAT .)
    DEDENT          reduce using rule 13 (command -> REPEAT expr block ENDREPEAT .)


state 56

    (14) command -> PROCEDURE ID block ENDPROC .

    NEWLINE         reduce using rule 14 (command -> PROCEDURE ID block ENDPROC .)
    IFBLOCK         reduce using rule 14 (command -> PROCEDURE ID block ENDPROC .)
    REPEAT          reduce using rule 14 (command -> PROCEDURE ID block ENDPROC .)
    PROCEDURE       reduce using rule 14 (command -> PROCEDURE ID block ENDPROC .)
    CALL            reduce using rule 14 (command -> PROCEDURE ID block ENDPROC .)
    RIGHT           reduce using rule 14 (command -> PROCEDURE ID block ENDPROC .)
    LEFT            reduce using rule 14 (command -> PROCEDURE ID block ENDPROC .)
    UP              reduce using rule 14 (command -> PROCEDURE ID block ENDPROC .)
    DOWN            reduce using rule 14 (command -> PROCEDURE ID block ENDPROC .)
    SET             reduce using rule 14 (command -> PROCEDURE ID block ENDPROC .)
    $end            reduce using rule 14 (command -> PROCEDURE ID block ENDPROC .)
    DEDENT          reduce using rule 14 (command -> PROCEDURE ID block ENDPROC .)


state 57

    (20) command -> SET ID EQUALS expr .
    (21) expr -> expr . PLUS factor
    (22) expr -> expr . MINUS factor

    NEWLINE         reduce using rule 20 (command -> SET ID EQUALS expr .)
    IFBLOCK         reduce using rule 20 (command -> SET ID EQUALS expr .)
    REPEAT          reduce using rule 20 (command -> SET ID EQUALS expr .)
    PROCEDURE       reduce using rule 20 (command -> SET ID EQUALS expr .)
    CALL            reduce using rule 20 (command -> SET ID EQUALS expr .)
    RIGHT           reduce using rule 20 (command -> SET ID EQUALS expr .)
    LEFT            reduce using rule 20 (command -> SET ID EQUALS expr .)
    UP              reduce using rule 20 (command -> SET ID EQUALS expr .)
    DOWN            reduce using rule 20 (command -> SET ID EQUALS expr .)
    SET             reduce using rule 20 (command -> SET ID EQUALS expr .)
    $end            reduce using rule 20 (command -> SET ID EQUALS expr .)
    DEDENT          reduce using rule 20 (command -> SET ID EQUALS expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38


state 58

    (4) block -> NEWLINE INDENT groupstat . DEDENT
    (5) groupstat -> groupstat . statement
    (7) statement -> . command NEWLINE
    (8) statement -> . command
    (9) command -> . IFBLOCK RIGHT block ENDIF
    (10) command -> . IFBLOCK DOWN block ENDIF
    (11) command -> . IFBLOCK UP block ENDIF
    (12) command -> . IFBLOCK LEFT block ENDIF
    (13) command -> . REPEAT expr block ENDREPEAT
    (14) command -> . PROCEDURE ID block ENDPROC
    (15) command -> . CALL ID
    (16) command -> . RIGHT expr
    (17) command -> . LEFT expr
    (18) command -> . UP expr
    (19) command -> . DOWN expr
    (20) command -> . SET ID EQUALS expr

    DEDENT          shift and go to state 59
    IFBLOCK         shift and go to state 4
    REPEAT          shift and go to state 9
    PROCEDURE       shift and go to state 10
    CALL            shift and go to state 11
    RIGHT           shift and go to state 5
    LEFT            shift and go to state 8
    UP              shift and go to state 7
    DOWN            shift and go to state 6
    SET             shift and go to state 12

    statement                      shift and go to state 60
    command                        shift and go to state 3

state 59

    (4) block -> NEWLINE INDENT groupstat DEDENT .

    ENDIF           reduce using rule 4 (block -> NEWLINE INDENT groupstat DEDENT .)
    ENDREPEAT       reduce using rule 4 (block -> NEWLINE INDENT groupstat DEDENT .)
    ENDPROC         reduce using rule 4 (block -> NEWLINE INDENT groupstat DEDENT .)


state 60

    (5) groupstat -> groupstat statement .

    DEDENT          reduce using rule 5 (groupstat -> groupstat statement .)
    IFBLOCK         reduce using rule 5 (groupstat -> groupstat statement .)
    REPEAT          reduce using rule 5 (groupstat -> groupstat statement .)
    PROCEDURE       reduce using rule 5 (groupstat -> groupstat statement .)
    CALL            reduce using rule 5 (groupstat -> groupstat statement .)
    RIGHT           reduce using rule 5 (groupstat -> groupstat statement .)
    LEFT            reduce using rule 5 (groupstat -> groupstat statement .)
    UP              reduce using rule 5 (groupstat -> groupstat statement .)
    DOWN            reduce using rule 5 (groupstat -> groupstat statement .)
    SET             reduce using rule 5 (groupstat -> groupstat statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IFBLOCK in state 0 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 0 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 0 resolved as shift
WARNING: shift/reduce conflict for CALL in state 0 resolved as shift
WARNING: shift/reduce conflict for RIGHT in state 0 resolved as shift
WARNING: shift/reduce conflict for LEFT in state 0 resolved as shift
WARNING: shift/reduce conflict for UP in state 0 resolved as shift
WARNING: shift/reduce conflict for DOWN in state 0 resolved as shift
WARNING: shift/reduce conflict for SET in state 0 resolved as shift
